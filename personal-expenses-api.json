{
  "openapi": "3.0.0",
  "info": {
    "title": "Personal Expenses API",
    "version": "0.0.1",
    "description": "The API for the personal expenses storage"
  },
  "tags": [
    {
      "name": "user",
      "description": "User operations"
    },
    {
      "name": "movement",
      "description": "Movement operations"
    },
    {
      "name": "category",
      "description": "Category operations"
    }
  ],
  "paths": {
    "/api/user": {
      "get": {
        "operationId": "list-User",
        "description": "List \"User\" resources",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[categories]",
            "required": false,
            "description": "Equality filter for \"categories\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-User",
        "description": "Create a \"User\" resource",
        "tags": [
          "user"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}": {
      "get": {
        "operationId": "fetch-User",
        "description": "Fetch a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-User-put",
        "description": "Update a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-User-patch",
        "description": "Update a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-User",
        "description": "Delete a \"User\" resource",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/movements": {
      "get": {
        "operationId": "fetch-User-related-movements",
        "description": "Fetch the related \"movements\" resource for \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[categories]",
            "required": false,
            "description": "Equality filter for \"categories\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/relationships/movements": {
      "get": {
        "operationId": "fetch-User-relationship-movements",
        "description": "Fetch the \"movements\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[categories]",
            "required": false,
            "description": "Equality filter for \"categories\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-User-relationship-movements-put",
        "description": "Update \"movements\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-User-relationship-movements-patch",
        "description": "Update \"movements\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-User-relationship-movements",
        "description": "Create new \"movements\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/categories": {
      "get": {
        "operationId": "fetch-User-related-categories",
        "description": "Fetch the related \"categories\" resource for \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[categories]",
            "required": false,
            "description": "Equality filter for \"categories\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/user/{id}/relationships/categories": {
      "get": {
        "operationId": "fetch-User-relationship-categories",
        "description": "Fetch the \"categories\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email]",
            "required": false,
            "description": "Equality filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$contains]",
            "required": false,
            "description": "String contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$search]",
            "required": false,
            "description": "String full-text search filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[email$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"email\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "name": "filter[categories]",
            "required": false,
            "description": "Equality filter for \"categories\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-User-relationship-categories-put",
        "description": "Update \"categories\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-User-relationship-categories-patch",
        "description": "Update \"categories\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-User-relationship-categories",
        "description": "Create new \"categories\" relationships for a \"User\"",
        "tags": [
          "user"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movement": {
      "get": {
        "operationId": "list-Movement",
        "description": "List \"Movement\" resources",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[date]",
            "required": false,
            "description": "Equality filter for \"date\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[date$lt]",
            "required": false,
            "description": "Less-than filter for \"date\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[date$lte]",
            "required": false,
            "description": "Less-than or equal filter for \"date\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[date$gt]",
            "required": false,
            "description": "Greater-than filter for \"date\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[date$gte]",
            "required": false,
            "description": "Greater-than or equal filter for \"date\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string",
              "format": "date-time"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description]",
            "required": false,
            "description": "Equality filter for \"description\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description$contains]",
            "required": false,
            "description": "String contains filter for \"description\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"description\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description$search]",
            "required": false,
            "description": "String full-text search filter for \"description\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"description\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[description$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"description\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[type]",
            "required": false,
            "description": "Equality filter for \"type\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "$ref": "#/components/schemas/MovementType"
            }
          },
          {
            "name": "filter[category]",
            "required": false,
            "description": "Equality filter for \"category\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user]",
            "required": false,
            "description": "Equality filter for \"user\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-Movement",
        "description": "Create a \"Movement\" resource",
        "tags": [
          "movement"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/MovementCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movement/{id}": {
      "get": {
        "operationId": "fetch-Movement",
        "description": "Fetch a \"Movement\" resource",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Movement-put",
        "description": "Update a \"Movement\" resource",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/MovementUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Movement-patch",
        "description": "Update a \"Movement\" resource",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/MovementUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-Movement",
        "description": "Delete a \"Movement\" resource",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movement/{id}/category": {
      "get": {
        "operationId": "fetch-Movement-related-category",
        "description": "Fetch the related \"category\" resource for \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movement/{id}/relationships/category": {
      "get": {
        "operationId": "fetch-Movement-relationship-category",
        "description": "Fetch the \"category\" relationships for a \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Movement-relationship-category-put",
        "description": "Update \"category\" relationship for a \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Movement-relationship-category-patch",
        "description": "Update \"category\" relationship for a \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movement/{id}/user": {
      "get": {
        "operationId": "fetch-Movement-related-user",
        "description": "Fetch the related \"user\" resource for \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/movement/{id}/relationships/user": {
      "get": {
        "operationId": "fetch-Movement-relationship-user",
        "description": "Fetch the \"user\" relationships for a \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Movement-relationship-user-put",
        "description": "Update \"user\" relationship for a \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Movement-relationship-user-patch",
        "description": "Update \"user\" relationship for a \"Movement\"",
        "tags": [
          "movement"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/category": {
      "get": {
        "operationId": "list-Category",
        "description": "List \"Category\" resources",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user]",
            "required": false,
            "description": "Equality filter for \"user\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-Category",
        "description": "Create a \"Category\" resource",
        "tags": [
          "category"
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryCreateRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/category/{id}": {
      "get": {
        "operationId": "fetch-Category",
        "description": "Fetch a \"Category\" resource",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Category-put",
        "description": "Update a \"Category\" resource",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Category-patch",
        "description": "Update a \"Category\" resource",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/CategoryUpdateRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/CategoryResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "422": {
            "description": "Request is unprocessable due to validation errors",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "delete": {
        "operationId": "delete-Category",
        "description": "Delete a \"Category\" resource",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation"
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/category/{id}/user": {
      "get": {
        "operationId": "fetch-Category-related-user",
        "description": "Fetch the related \"user\" resource for \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/UserResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/category/{id}/relationships/user": {
      "get": {
        "operationId": "fetch-Category-relationship-user",
        "description": "Fetch the \"user\" relationships for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Category-relationship-user-put",
        "description": "Update \"user\" relationship for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Category-relationship-user-patch",
        "description": "Update \"user\" relationship for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toOneRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toOneRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/category/{id}/movements": {
      "get": {
        "operationId": "fetch-Category-related-movements",
        "description": "Fetch the related \"movements\" resource for \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/include"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user]",
            "required": false,
            "description": "Equality filter for \"user\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/MovementListResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    },
    "/api/category/{id}/relationships/movements": {
      "get": {
        "operationId": "fetch-Category-relationship-movements",
        "description": "Fetch the \"movements\" relationships for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          },
          {
            "$ref": "#/components/parameters/sort"
          },
          {
            "$ref": "#/components/parameters/page-offset"
          },
          {
            "$ref": "#/components/parameters/page-limit"
          },
          {
            "name": "filter[id]",
            "required": false,
            "description": "Id filter",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name]",
            "required": false,
            "description": "Equality filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$contains]",
            "required": false,
            "description": "String contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$icontains]",
            "required": false,
            "description": "String case-insensitive contains filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$search]",
            "required": false,
            "description": "String full-text search filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$startsWith]",
            "required": false,
            "description": "String startsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[name$endsWith]",
            "required": false,
            "description": "String endsWith filter for \"name\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[user]",
            "required": false,
            "description": "Equality filter for \"user\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "name": "filter[movements]",
            "required": false,
            "description": "Equality filter for \"movements\"",
            "in": "query",
            "style": "form",
            "explode": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "put": {
        "operationId": "update-Category-relationship-movements-put",
        "description": "Update \"movements\" relationships for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "patch": {
        "operationId": "update-Category-relationship-movements-patch",
        "description": "Update \"movements\" relationships for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      },
      "post": {
        "operationId": "create-Category-relationship-movements",
        "description": "Create new \"movements\" relationships for a \"Category\"",
        "tags": [
          "category"
        ],
        "parameters": [
          {
            "$ref": "#/components/parameters/id"
          }
        ],
        "requestBody": {
          "content": {
            "application/vnd.api+json": {
              "schema": {
                "$ref": "#/components/schemas/_toManyRelationshipRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_toManyRelationshipResponse"
                }
              }
            }
          },
          "403": {
            "description": "Request is forbidden",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          },
          "404": {
            "description": "Resource is not found",
            "content": {
              "application/vnd.api+json": {
                "schema": {
                  "$ref": "#/components/schemas/_errorResponse"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "_jsonapi": {
        "type": "object",
        "description": "An object describing the server’s implementation",
        "required": [
          "version"
        ],
        "properties": {
          "version": {
            "type": "string"
          }
        }
      },
      "_meta": {
        "type": "object",
        "description": "Meta information about the request or response",
        "properties": {
          "serialization": {
            "description": "Superjson serialization metadata"
          }
        },
        "additionalProperties": true
      },
      "_resourceIdentifier": {
        "type": "object",
        "description": "Identifier for a resource",
        "required": [
          "type",
          "id"
        ],
        "properties": {
          "type": {
            "type": "string",
            "description": "Resource type"
          },
          "id": {
            "type": "string",
            "description": "Resource id"
          }
        }
      },
      "_resource": {
        "allOf": [
          {
            "$ref": "#/components/schemas/_resourceIdentifier"
          },
          {
            "type": "object",
            "description": "A resource with attributes and relationships",
            "properties": {
              "attributes": {
                "type": "object",
                "description": "Resource attributes"
              },
              "relationships": {
                "type": "object",
                "description": "Resource relationships"
              }
            }
          }
        ]
      },
      "_links": {
        "type": "object",
        "required": [
          "self"
        ],
        "description": "Links related to the resource",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link for refetching the curent results"
          }
        }
      },
      "_pagination": {
        "type": "object",
        "description": "Pagination information",
        "required": [
          "first",
          "last",
          "prev",
          "next"
        ],
        "properties": {
          "first": {
            "type": "string",
            "description": "Link to the first page",
            "nullable": true
          },
          "last": {
            "type": "string",
            "description": "Link to the last page",
            "nullable": true
          },
          "prev": {
            "type": "string",
            "description": "Link to the previous page",
            "nullable": true
          },
          "next": {
            "type": "string",
            "description": "Link to the next page",
            "nullable": true
          }
        }
      },
      "_errors": {
        "type": "array",
        "description": "An array of error objects",
        "items": {
          "type": "object",
          "required": [
            "status",
            "code"
          ],
          "properties": {
            "status": {
              "type": "string",
              "description": "HTTP status"
            },
            "code": {
              "type": "string",
              "description": "Error code"
            },
            "prismaCode": {
              "type": "string",
              "description": "Prisma error code if the error is thrown by Prisma"
            },
            "title": {
              "type": "string",
              "description": "Error title"
            },
            "detail": {
              "type": "string",
              "description": "Error detail"
            },
            "reason": {
              "type": "string",
              "description": "Detailed error reason"
            },
            "zodErrors": {
              "type": "object",
              "additionalProperties": true,
              "description": "Zod validation errors if the error is due to data validation failure"
            }
          }
        }
      },
      "_errorResponse": {
        "type": "object",
        "required": [
          "errors"
        ],
        "description": "An error response",
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "errors": {
            "$ref": "#/components/schemas/_errors"
          }
        }
      },
      "_relationLinks": {
        "type": "object",
        "required": [
          "self",
          "related"
        ],
        "description": "Links related to a relationship",
        "properties": {
          "self": {
            "type": "string",
            "description": "Link for fetching this relationship"
          },
          "related": {
            "type": "string",
            "description": "Link for fetching the resource represented by this relationship"
          }
        }
      },
      "_toOneRelationship": {
        "type": "object",
        "description": "A to-one relationship",
        "properties": {
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_resourceIdentifier"
              }
            ],
            "nullable": true
          }
        }
      },
      "_toOneRelationshipWithLinks": {
        "type": "object",
        "required": [
          "links",
          "data"
        ],
        "description": "A to-one relationship with links",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/_relationLinks"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_resourceIdentifier"
              }
            ],
            "nullable": true
          }
        }
      },
      "_toManyRelationship": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "A to-many relationship",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resourceIdentifier"
            }
          }
        }
      },
      "_toManyRelationshipWithLinks": {
        "type": "object",
        "required": [
          "links",
          "data"
        ],
        "description": "A to-many relationship with links",
        "properties": {
          "links": {
            "$ref": "#/components/schemas/_pagedRelationLinks"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resourceIdentifier"
            }
          }
        }
      },
      "_pagedRelationLinks": {
        "description": "Relationship links with pagination information",
        "allOf": [
          {
            "$ref": "#/components/schemas/_pagination"
          },
          {
            "$ref": "#/components/schemas/_relationLinks"
          }
        ]
      },
      "_toManyRelationshipRequest": {
        "type": "object",
        "required": [
          "data"
        ],
        "description": "Input for manipulating a to-many relationship",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resourceIdentifier"
            }
          }
        }
      },
      "_toOneRelationshipRequest": {
        "description": "Input for manipulating a to-one relationship",
        "type": "object",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "$ref": "#/components/schemas/_resourceIdentifier"
          }
        },
        "nullable": true
      },
      "_toManyRelationshipResponse": {
        "description": "Response for a to-many relationship",
        "allOf": [
          {
            "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
          },
          {
            "type": "object",
            "properties": {
              "jsonapi": {
                "$ref": "#/components/schemas/_jsonapi"
              }
            }
          }
        ]
      },
      "_toOneRelationshipResponse": {
        "description": "Response for a to-one relationship",
        "allOf": [
          {
            "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
          },
          {
            "type": "object",
            "properties": {
              "jsonapi": {
                "$ref": "#/components/schemas/_jsonapi"
              }
            }
          }
        ]
      },
      "MovementType": {
        "type": "string",
        "description": "The \"MovementType\" Enum",
        "enum": [
          "income",
          "expense"
        ]
      },
      "User": {
        "type": "object",
        "description": "The \"User\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "required": [
              "email"
            ],
            "properties": {
              "email": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "movements": {
                "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
              },
              "categories": {
                "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
              }
            }
          }
        }
      },
      "UserCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"User\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"User\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "email"
                ],
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "movements": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  },
                  "categories": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "UserUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"User\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"User\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "email": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "movements": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  },
                  "categories": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "UserResponse": {
        "type": "object",
        "description": "Response for a \"User\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/User"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "movements": {
                        "$ref": "#/components/schemas/_toManyRelationship"
                      },
                      "categories": {
                        "$ref": "#/components/schemas/_toManyRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "UserListResponse": {
        "type": "object",
        "description": "Response for a list of \"User\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/User"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "movements": {
                          "$ref": "#/components/schemas/_toManyRelationship"
                        },
                        "categories": {
                          "$ref": "#/components/schemas/_toManyRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      },
      "Movement": {
        "type": "object",
        "description": "The \"Movement\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "required": [
              "date",
              "name",
              "description",
              "type",
              "categoryId",
              "userId"
            ],
            "properties": {
              "date": {
                "type": "string",
                "format": "date-time"
              },
              "name": {
                "type": "string"
              },
              "description": {
                "type": "string"
              },
              "type": {
                "$ref": "#/components/schemas/MovementType"
              },
              "categoryId": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "category": {
                "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
              },
              "user": {
                "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
              }
            }
          }
        }
      },
      "MovementCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"Movement\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Movement\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "name",
                  "description"
                ],
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/MovementType"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "MovementUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"Movement\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Movement\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "date": {
                    "type": "string",
                    "format": "date-time"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  },
                  "type": {
                    "$ref": "#/components/schemas/MovementType"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "category": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  },
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "MovementResponse": {
        "type": "object",
        "description": "Response for a \"Movement\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Movement"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "category": {
                        "$ref": "#/components/schemas/_toOneRelationship"
                      },
                      "user": {
                        "$ref": "#/components/schemas/_toOneRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "MovementListResponse": {
        "type": "object",
        "description": "Response for a list of \"Movement\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Movement"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "category": {
                          "$ref": "#/components/schemas/_toOneRelationship"
                        },
                        "user": {
                          "$ref": "#/components/schemas/_toOneRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      },
      "Category": {
        "type": "object",
        "description": "The \"Category\" model",
        "required": [
          "id",
          "type",
          "attributes"
        ],
        "properties": {
          "id": {
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "attributes": {
            "type": "object",
            "required": [
              "name",
              "userId"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "userId": {
                "type": "string"
              }
            }
          },
          "relationships": {
            "type": "object",
            "properties": {
              "user": {
                "$ref": "#/components/schemas/_toOneRelationshipWithLinks"
              },
              "movements": {
                "$ref": "#/components/schemas/_toManyRelationshipWithLinks"
              }
            }
          }
        }
      },
      "CategoryCreateRequest": {
        "type": "object",
        "description": "Input for creating a \"Category\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Category\" model",
            "required": [
              "type",
              "attributes"
            ],
            "properties": {
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "required": [
                  "name"
                ],
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  },
                  "movements": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "CategoryUpdateRequest": {
        "type": "object",
        "description": "Input for updating a \"Category\"",
        "required": [
          "data"
        ],
        "properties": {
          "data": {
            "type": "object",
            "description": "The \"Category\" model",
            "required": [
              "id",
              "type",
              "attributes"
            ],
            "properties": {
              "id": {
                "type": "string"
              },
              "type": {
                "type": "string"
              },
              "attributes": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string"
                  }
                }
              },
              "relationships": {
                "type": "object",
                "properties": {
                  "user": {
                    "$ref": "#/components/schemas/_toOneRelationship"
                  },
                  "movements": {
                    "$ref": "#/components/schemas/_toManyRelationship"
                  }
                }
              }
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          }
        }
      },
      "CategoryResponse": {
        "type": "object",
        "description": "Response for a \"Category\"",
        "required": [
          "data"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "allOf": [
              {
                "$ref": "#/components/schemas/Category"
              },
              {
                "type": "object",
                "properties": {
                  "relationships": {
                    "type": "object",
                    "properties": {
                      "user": {
                        "$ref": "#/components/schemas/_toOneRelationship"
                      },
                      "movements": {
                        "$ref": "#/components/schemas/_toManyRelationship"
                      }
                    }
                  }
                }
              }
            ]
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "$ref": "#/components/schemas/_links"
          }
        }
      },
      "CategoryListResponse": {
        "type": "object",
        "description": "Response for a list of \"Category\"",
        "required": [
          "data",
          "links"
        ],
        "properties": {
          "jsonapi": {
            "$ref": "#/components/schemas/_jsonapi"
          },
          "data": {
            "type": "array",
            "items": {
              "allOf": [
                {
                  "$ref": "#/components/schemas/Category"
                },
                {
                  "type": "object",
                  "properties": {
                    "relationships": {
                      "type": "object",
                      "properties": {
                        "user": {
                          "$ref": "#/components/schemas/_toOneRelationship"
                        },
                        "movements": {
                          "$ref": "#/components/schemas/_toManyRelationship"
                        }
                      }
                    }
                  }
                }
              ]
            }
          },
          "meta": {
            "$ref": "#/components/schemas/_meta"
          },
          "included": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/_resource"
            }
          },
          "links": {
            "allOf": [
              {
                "$ref": "#/components/schemas/_links"
              },
              {
                "$ref": "#/components/schemas/_pagination"
              }
            ]
          }
        }
      }
    },
    "parameters": {
      "id": {
        "name": "id",
        "in": "path",
        "description": "The resource id",
        "required": true,
        "schema": {
          "type": "string"
        }
      },
      "include": {
        "name": "include",
        "in": "query",
        "description": "Relationships to include",
        "required": false,
        "style": "form",
        "schema": {
          "type": "string"
        }
      },
      "sort": {
        "name": "sort",
        "in": "query",
        "description": "Fields to sort by",
        "required": false,
        "style": "form",
        "schema": {
          "type": "string"
        }
      },
      "page-offset": {
        "name": "page[offset]",
        "in": "query",
        "description": "Offset for pagination",
        "required": false,
        "style": "form",
        "schema": {
          "type": "integer"
        }
      },
      "page-limit": {
        "name": "page[limit]",
        "in": "query",
        "description": "Limit for pagination",
        "required": false,
        "style": "form",
        "schema": {
          "type": "integer"
        }
      }
    },
    "securitySchemes": {
      "myBearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  },
  "security": [
    {
      "myBearer": []
    }
  ]
}